# Creating multi-stage build for production
FROM node:18-alpine AS build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json package-lock.json ./
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production
ENV PATH=/opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN npm run build

# Creating final production image
FROM node:18-alpine
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH=/opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app && \
    mkdir -p /opt/app/public/uploads && \
    chown -R node:node /opt/app/public

# Backup all public files (except uploads) to restore them if volume is mounted over them
# This ensures static files like robots.txt, favicon, etc. persist
RUN mkdir -p /opt/app/.public-template && \
    find /opt/app/public -maxdepth 1 -type f -exec cp {} /opt/app/.public-template/ \; && \
    chown -R node:node /opt/app/.public-template

USER node
EXPOSE 1337
# Ensure uploads directory exists, restore missing static files, then start
CMD sh -c "mkdir -p /opt/app/public/uploads && for file in /opt/app/.public-template/*; do [ -f \"/opt/app/public/\$(basename \$file)\" ] || cp \$file /opt/app/public/; done 2>/dev/null || true; npm run start"
